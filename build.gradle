/*
 * Moodini
 * Copyright (C) 2016-2017 Marcus Fihlon
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.ben-manes:gradle-versions-plugin:$gradleVersionsVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:$coverallsGradlePluginVersion"
        classpath "org.kordamp.gradle:jdeps-gradle-plugin:$jdepsPluginVersion"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubeGradlePluginVersion"
    }
}

group 'ch.fihlon.moodini'
version "$moodiniVersion"

apply plugin: 'kotlin'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-noarg'
apply plugin: 'war'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'org.sonarqube'
apply plugin: 'org.kordamp.jdeps'
apply plugin: 'com.github.ben-manes.versions'

repositories {
    mavenCentral()
    maven {
        url "http://dl.bintray.com/arturbosch/code-analysis"
    }
}

allOpen {
    annotation('javax.ejb.Stateless')
    annotation('javax.ws.rs.Path')
}

noArg {
    annotation('javax.ws.rs.Path')
}

war {
    archiveName 'moodini.war'
}

jacocoTestReport {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarqube.com'
        property 'sonar.projectKey', 'mcpringle:moodini'
        property 'sonar.projectName', 'Moodini'
        property 'sonar.projectVersion', '1.0'
        property 'sonar.sources', 'src/main'
        property 'sonar.java.source', '8'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.junit.reportsPath', 'build/test-results/test'
        property 'sonar.jacoco.reportPaths', 'build/jacoco/test.exec'
        property 'sonar.github.repository', 'McPringle/moodini'
        property 'sonar.links.homepage', 'https://www.moodini.ch/'
        property 'sonar.links.ci', 'https://travis-ci.org/McPringle/moodini'
        property 'sonar.links.scm', 'https://github.com/McPringle/moodini'
        property 'sonar.links.issue', 'https://github.com/McPringle/moodini/issues'
        property 'sonar.exclusions', 'src/main/webapp/bower_components/**'
    }
}

configurations {
    all {
        resolutionStrategy.force "com.fasterxml.jackson.core:jackson-core:$jacksonVersion",
                "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
                "com.google.code.gson:gson:$gsonVersion",
                "org.javassist:javassist:$javassistVersion",
                "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion",
                "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion",
                "org.mockito:mockito-core:$mockitoVersion"
        resolutionStrategy.failOnVersionConflict()
    }
    detekt
}

task detekt(type: JavaExec) {
    main = "io.gitlab.arturbosch.detekt.cli.Main"
    classpath = configurations.detekt
    def input = "$project.projectDir.absolutePath"
    def filters = ".*test.*"
    def rulesets = ""
    def params = [ '-p', input, '-f', filters, '-r', rulesets]
    args(params)
}

afterEvaluate {
    check.dependsOn 'detekt'
}

dependencies {
    providedCompile (
            "javax:javaee-api:$javaeeApiVersion"
    )
    compile (
            "io.github.microutils:kotlin-logging:$kotlinLoggingVersion",
            "com.airhacks:jaxrs-cors:$jaxrsCorsVersion",
            "com.google.code.gson:gson:$gsonVersion",
            "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion",
            "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion",
            "org.litote.kmongo:kmongo:$kmongoVersion",
            "org.slf4j:slf4j-api:$slf4jVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.zalando.phrs:jersey-media-json-gson:$jerseyMediaJsonGsonVersion"
    )
    testCompile (
            "io.kotlintest:kotlintest:$kotlinTestVersion",
            "com.nhaarman:mockito-kotlin:$mockitoKotlinVersion"
    )
    detekt (
            "io.gitlab.arturbosch.detekt:detekt-cli:$detektVersion",
            "io.gitlab.arturbosch.detekt:detekt-formatting:$detektFormattingVersion"
    )
}

